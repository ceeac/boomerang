// Generated by Bisonc++ V6.00.00 on Fri, 13 Oct 2017 13:43:01 +0200

#ifndef sslSSLParser_h_included
#define sslSSLParser_h_included

// $insert baseclass
#include "SSLParserBase.h"
// $insert scanner.h
#include "SSLScanner.h"

// $insert namespace-open
namespace ssl
{

#undef SSLParser
    // CAVEAT: between the baseclass-include directive and the
    // #undef directive in the previous line references to SSLParser
    // are read as SSLParserBase.
    // If you need to include additional headers in this file
    // you should do so after these comment-lines.


class SSLParser: public SSLParserBase
{
    std::ifstream m_file;

    // $insert scannerobject
    SSLScanner d_scanner;


    public:
        SSLParser(RTLInstDict& dict, const QString& filename)
            : m_file(qPrintable(filename))
            , d_scanner(m_file)
            , Dict(dict)
        {}

        SSLParser(RTLInstDict& dict, std::istream& in = std::cin, std::ostream& out = std::cout)
            : d_scanner(in, out)
            , Dict(dict)
        {}

        int parse();

    private:
        void error();                   // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner.
        void print();                   // use, e.g., d_token, d_loc
        void exceptionHandler(std::exception const &exc);

    // support functions for parse():
        void executeAction__(int ruleNr);
        void errorRecovery__();
        void nextCycle__();
        void nextToken__();
        void print__();

        OPER strToOper(const QString& s);
        void expandTables(const std::shared_ptr<InsNameElem>& iname, const std::list<QString>& params, SharedRTL o_rtlist, RTLInstDict& Dict);
        SharedExp makeSuccessor(SharedExp e);
    public:
        static Statement *parseExp(const char *str);

    private:
        RTLInstDict& Dict;
};

// $insert namespace-close
}

#endif
